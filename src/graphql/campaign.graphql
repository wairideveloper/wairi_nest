type Campaign {
    idx: Int!
    id: String!
    name: String
    partnerIdx: Int
    nickname: String
    number: String
    email: String
    phone: String
    tel: String
    addr1: String
    addr2: String
    level: Int
    status: Int
    regdate: String
    info: String
    lastUpdate: String
    image: String
    weight: Int
    cateName: String
    cateIdx: Int
    cateAreaName: String
    cateAreaIdx: Int
    lowestPriceOrig: Int
    discountPercentage: Int
    discountPrice: Int
    addrLat: Float
    addrLng: Float
    production_guide: String
    caution: String
}

type CampaignDetail{
    campaign: Campaign!
    campaignItem: [CampaignItem!]!
}

type  Campaigns implements Pagination {
    #  pagination: Pagination!
    dataPerPage: Int
    totalPage: Int
    total: Int
    next: Int
    previous: Int
    currentPage: Int
    products: [Campaign!]!
}

type CampaignReview {
    idx : Int
    memberIdx: Int
    campaignIdx: Int
    itemIdx: Int
    submitIdx: Int
    rate: Int
    content: String
    images: String
    regdate: String
    content_a: String
    regdate_a: String
}

type returnLogin{
    token: String!
}

type CampaignItemSchedule{
    idx: Int
    itemIdx: Int
    name: String
    priceOrig: Int
    priceDeposit: Int
    stock: Int
    startDay: String
    endDay: String
    date: String
    active: String
    dc11: Int
    minDays: Int
    maxDays: Int
}

type CampaignRecent{
    idx: Int
    name: String
    priceOrig: Int
    priceDeposit: Int
    lowestPriceCalcType1: Int
    lowestPriceCalcType2: Int
    lowestPriceSellType1: Int
    lowestPriceOrig: Int
    image: String
    cateName: String
    cateIdx: Int
    cateAreaName: String
    partnerName: String
}

type CampaignRecents implements Pagination {
    #  pagination: Pagination!
    dataPerPage: Int
    totalPage: Int
    total: Int
    next: Int
    previous: Int
    currentPage: Int
    data: [CampaignRecent!]!
}

type CampaignFav{
    idx: Int
    memberIdx: Int
    campaignIdx: Int
    regdate: String
}

type CampaignFavs implements Pagination {
    #  pagination: Pagination!
    dataPerPage: Int
    totalPage: Int
    total: Int
    next: Int
    previous: Int
    currentPage: Int
    data: [CampaignFav!]!
}

input FavInput{
#    memberIdx: Int!
    campaignIdx: Int!
}

type SetCampaignFavResponse{
    idx: Int
    regdate: String
    campaignIdx: Int
}

type DelCampaignFavResponse{
    code: Int
    message: String
}

type CampaignSchedule{
    active: [String]
    items: [ItemScedule]!
}

type ItemScedule{
    date: String
    itemSchedule: [CampaignItemSchedule]!
}

extend type Query {
    #  getAllMember(skip: Int, take: Int!,title:String): [Member]
    getCampaign(id: Int!): Campaign!
    #캠페인 리스트
    getCampaigns(take: Int!,page:Int!,cate:Int,cateArea:Int): Campaigns!

    #관심 캠페인 리스트
    getFavCampaigns(take: Int!,page:Int!,cate:Int,cateArea:Int): Campaigns!

    #캠페인 상세
    getDetailCampaign(idx: Int!): CampaignDetail!

    getCampaignItem(idx:Int!): [CampaignItem]!
    getItemSchedule(idx:Int!, start_day:String, end_day:String): [CampaignItemSchedule]!
    getActiveItemSchedule(idx:Int!, start_day:String, end_day:String): [CampaignItemSchedule]!
    getCampaignRecent(memberIdx:Int!,page:Int,take:Int): CampaignRecents!

    getCampaignSchedule(idx:Int!): CampaignSchedule!

    getCampaignItemSchedule(idx:Int!): CampaignItemSchedule

    #캠페인 검색
    search(keyword: String!): Campaigns!

    login(idx:Int!): returnLogin!
}

extend type Mutation{
    setCampaignFav(favInput: FavInput): SetCampaignFavResponse!
    delCampaignFav(favInput: FavInput): DelCampaignFavResponse!
}
