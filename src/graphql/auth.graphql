type Partner {
    idx: Int!
    status: Int
    corpName: String
    corpCeo: String
    corpTel: String
    attachBiz: String
    contactName: String
    contactPhone: String
    contactEmail: String
    id: String
    password: String
    regdate: String
    lastSignin: String
    noteReceivers: String
}

input LoginInput{
    id: String!
    password: String!
}

input SignupInput {
    type: Int
    id: String
    password: String
#    nickname: String
#    phone: String
    email: String
#    receipt_id: String
#    name: String
#    unique: String
#    di: String
#    birth: Int
#    gender: Int
#    channelType: Int
#    link: String
    refererRoot: Int
    refererRootInput: String
    agree: Int
}

input PartnerSignupInput {
    id: String
    password: String
    corpName: String
    corpCeo: String
    corpTel: String
    attachBiz: String
    contactName: String
    contactPhone: String
    contactEmail: String
}

input ChangePasswordInput{
    username: String!
    phone: String!
    password: String!
}

input ChannelInput1{
    channelType: Int
    link: String
    refererRoot: Int
    refererRootInput: String
}

type LoginResponse{
    message: String!
    access_token: String
    refresh_token: String
    member: Member!
}

type MemberSignupResponse{
    message: String!
    access_token: String
    refresh_token: String
    data: Member!
}

type PartnerSignupResponse{
    message: String!
    access_token: String
    refresh_token: String
    data: Partner!
}

type identityVerificationResponse{
    status: String!
    code: String
    message: String
    data: identityVerificationData
}
type identityVerificationV2Response{
    status: String!
    code: String
    message: String
    data: identityVerificationDataV2
}

type identityVerificationData{
    receipt_id: String
    order_id: String
    pg: String
    method: String
    pg_name: String
    certificate:certificate
    payment_data:payment_data
}

type identityVerificationDataV2{
    receipt_id: String
    order_id: String
    pg: String
    method: String
    pg_name: String
    authenticated_at: String
    status_locale:String
    authenticate_data: authenticate_data
}

type authenticate_data{
    phone: String
    unique: String
    di: String
    name: String
    birth: String
    gender: Int
    carrier: String
    tid: String
}

type certificate{
    username: String
    phone   : String
    birth   : String
    gender  : String
    unique  : String
    di      : String
}

type payment_data{
    username: String
    phone   : String
    birth   : String
    gender  : String
    unique  : String
    di      : String
    receipt_id: String
    name: String
    p : String
    tid: String
    pg : String
    pm : String
    pg_a : String
    pm_a : String
    o_id : String
    p_at : String
    s : Int
    g : Int
}

type refresh_token{
    refresh_token: String!
}

type SnsChannel {
    text: String
}

type SubscriptionPath {
    text: String
}

input ChangeMemberInfoInput {
    nickname: String
    phone: String
    email: String
}

extend type Query {
    identityVerification(receipt_id : String!): identityVerificationResponse
    identityVerificationV2(receipt_id : String!): identityVerificationV2Response
    identityVerificationFindV2(receipt_id : String!): identityVerificationV2Response
    reVerifyPhoneV2(receipt_id : String!): identityVerificationV2Response

    findId(phone : String!, username : String!): Member
    getMemberInfo(id: String!): Member
    getSnsChannel : [SnsChannel]
    getSubscriptionPath : [SubscriptionPath]

    kakaoSignup(signupInput:SignupInput!): MemberSignupResponse
    naverSignup(signupInput:SignupInput!): MemberSignupResponse
    googleSignup(signupInput:SignupInput!): MemberSignupResponse
}
extend type Mutation{
    login(loginInput:LoginInput!): LoginResponse
    signup(signupInput:SignupInput!): MemberSignupResponse

    partnerSignup(partnerSignupInput:PartnerSignupInput!): PartnerSignupResponse
    changePassword(changePasswordInput: ChangePasswordInput!): Member
    getAccessToken(refresh_token : String!): LoginResponse
    setChannelManagement(channelInput: ChannelInput): String

    changeMemberInfo(changeMemberInfoInput: ChangeMemberInfoInput): Member
}

