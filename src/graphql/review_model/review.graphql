type Review{
    idx: Int!
    memberIdx: Int!
    campaignIdx: Int
    campaignName: String
    itemIdx: Int
    submitIdx: Int
    rate: Int!
    image: String
    content: String
    content_a: String
    regdate: String
    regdate_a: String
    memberName: String
    images: [ReviewImage]
    itemName: String
    name: String
    awsKey: String
    url: String
}

type ReviewImage{
    key: String
    url: String
}

type Reviews implements Pagination {
    dataPerPage: Int
    totalPage: Int
    total: Int
    next: Int
    previous: Int
    currentPage: Int
    data: [Review!]!
}

type deleteReviewResponse{
    status: Int
    message: String
}

scalar Upload

extend type Query {
    getReviews(idx:Int! take: Int!,page:Int!): Reviews
    getReview(idx:Int!): Review
    getMyReviews(take: Int!,page:Int!): Reviews
}

input CreateReviewInput{
    content: String!,
    campaignIdx: Int!,
    itemIdx: Int!,
    submitIdx: Int!,
    rate: Int!,
    images: String
}

input UpdateReviewInput{
    idx:Int!,
    content: String!,
    campaignIdx: Int!,
    itemIdx: Int!,
    submitIdx: Int!,
    rate: Int!,
    images: String,
    deleteImages: String
}

extend type Mutation {
#    createReview(files: [Upload],
#        content: String!,
#        campaignIdx: Int!,
#        itemIdx: Int!,
#        submitIdx: Int!,
#        rate: Int!,
#    ): GraphqlHttpResponse
    createReview(
        createReviewInput: CreateReviewInput
    ): GraphqlHttpResponse
#    updateReview(idx:Int!,
#        images: String!,
#        files: [Upload],
#        content: String!,
#        campaignIdx: Int!,
#        itemIdx: Int!,
#        submitIdx: Int!,
#        rate: Int!,
#    ): GraphqlHttpResponse
    updateReview(
        updateReviewInput: UpdateReviewInput
    ): GraphqlHttpResponse
    deleteReview(idx:Int!): deleteReviewResponse
    deleteImage: deleteReviewResponse
}
