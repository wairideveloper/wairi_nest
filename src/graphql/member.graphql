scalar BigInt
scalar Date
scalar DateTime

type Member {
    idx: Int!
    id: String!
    type: Int
    name: String!
    nickname: String
    number: String
    email: String
    phone: String
    level: Int
    status: Int
    regdate: String
    lastSignin: String
    lastUpdate: String
    ci: String
    di: String
    memberChannel: [MemberChannel]
    campaignReview: [CampaignReview]
}

type MemberChannel {
    idx: Int
    type: Int
    typeText: String
    link: String
    regdate: String
    date: String
    level: Int
    interests: String
    filename: String
    origName: String
    average_visitor: Int
    subscriber: Int
    content_count: Int
    followers: Int
    follow: Int
}

type setMemberChannelResponse {
    code: Int
    message: String
    idx: Int
    type: Int
    typeText: String
    link: String
    interests: String
    channelName: String
    regdate: String
    level: Int
}

input CreateMemberChannelInput {
    type: Int!
    link: String!
    interests: String
    channelName: String
}

input UpdateMemberChannelInput {
    idx: Int!
    type: Int!
    link: String!
    interests: Int
    channelName: String
}

type Channel{
    idx: Int
    type: Int
    typeText: String
    link: String
    regdate: String
    interests: String
}

extend type Query {
    getAllMember(skip: Int, take: Int!,title:String): [Member]
    getMember(id: Int!): Member
    getMemberByEmail(email: String!): Member
    getMemberChannel:[Channel]
}

extend type Mutation {
    #채널등록
    createMemberChannel(createMemberChannelInput: CreateMemberChannelInput):setMemberChannelResponse
    updateMemberChannel(updateMemberChannelInput: UpdateMemberChannelInput):setMemberChannelResponse
    deleteMemberChannel(channelIdx: Int!):setMemberChannelResponse
}
