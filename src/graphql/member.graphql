scalar BigInt
scalar Date
scalar DateTime

type Member {
    idx: Int!
    id: String!
    type: Int
    name: String
    nickname: String
    number: String
    email: String
    phone: String
    level: Int
    status: Int
    regdate: String
    lastSignin: String
    lastUpdate: String
    ci: String
    di: String
    social_type: String
    memberChannel: [MemberChannel]
    campaignReview: [CampaignReview]
    code: String
    is_black: Int
    deviceToken: [MemberDevice]
}

type MemberDevice {
    idx: Int!
    memberIdx: Int!
    platform: String!
    device_token: String!
    created_at: String!
    updated_at: String!
}

type MemberChannel {
    idx: Int
    type: Int
    typeText: String
    link: String
    regdate: String
    date: String
    level: Int
    interests: String
    filename: String
    origName: String
    average_visitor: Int
    subscriber: Int
    content_count: Int
    followers: Int
    follow: Int
}

type setMemberChannelResponse {
    code: Int
    message: String
    idx: Int
    type: Int
    typeText: String
    link: String
    interests: String
    channelName: String
    regdate: String
    level: Int
}

input CreateMemberChannelInput {
    type: Int!
    link: String!
    interests: String
    channelName: String
}

input UpdateMemberChannelInput {
    idx: Int!
    type: Int!
    link: String!
    interests: Int
    channelName: String
}

type Channel{
    idx: Int
    type: Int
    typeText: String
    link: String
    regdate: String
    interests: String
    level: Int
    channelName: String
}

type PushLog{
    idx: Int
    memberIdx: Int
    title: String
    subTitle: String
    isRead: Boolean
    roomName: String
    roomIdx: String
    category: String
    created_at: String
}

type IsReadCount{
    count: Int
}

type NotificationSetting{
    event: Boolean
    action: Boolean
    night: Boolean
    agree: Boolean
}

extend type Query {
    getAllMember(skip: Int, take: Int!,title:String): [Member]
    getMember(id: Int!): Member
    getMemberByEmail(email: String!): Member
    getMemberChannel:[Channel]
    getMemberPushLogs: [PushLog]
    getIsReadCount(idx: Int!): IsReadCount
    getNotification(idx: Int!,device_id:String!): NotificationSetting
}

extend type Mutation {
    #채널등록
    createMemberChannel(createMemberChannelInput: CreateMemberChannelInput):setMemberChannelResponse
    updateMemberChannel(updateMemberChannelInput: UpdateMemberChannelInput):setMemberChannelResponse
    deleteMemberChannel(channelIdx: Int!):setMemberChannelResponse
    updateNotificationSetting(event: Boolean, action: Boolean, night: Boolean, agree: Boolean, device_id: String): GraphqlHttpResponse
    updateIsRead(idx: Int!): GraphqlHttpResponse
}
